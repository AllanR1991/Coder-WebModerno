//29) â€‹Utilizando a estrutura de repetiÃ§Ã£o for, faÃ§a uma funÃ§Ã£o que percorra um vetor e conte quantos nÃºmeros 
//deste vetor estÃ£o no intervalo [10,20] (repare que o intervalo Ã© fechado, ou seja, inclui o 10 e o 20) e quantos 
//deles estÃ£o fora do intervalo, escrevendo estas informaÃ§Ãµes.


/**
Sim, os parÃªnteses e colchetes indicam se o intervalo Ã© aberto ou fechado:

Colchetes [ ] â†’ Indicam que o limite estÃ¡ incluÃ­do (intervalo fechado).
ParÃªnteses ( ) â†’ Indicam que o limite nÃ£o estÃ¡ incluÃ­do (intervalo aberto).
Exemplos:
[10, 20] â†’ Intervalo fechado: inclui 10 e 20.
(10, 20) â†’ Intervalo aberto: nÃ£o inclui 10 nem 20.
(10, 20] â†’ Aberto em 10, fechado em 20: inclui 20, mas nÃ£o 10.
[10, 20) â†’ Fechado em 10, aberto em 20: inclui 10, mas nÃ£o 20.
Se quiser excluir um valor do intervalo, use parÃªnteses para deixÃ¡-lo aberto! ğŸš€
 */


function contemNumero(array) {
    let foraDoLimite = 0;
    let dentroDoLimite = 0;

    for (let i = 0; i < array.length; i++) {
        if (array[i] < 10 || array[i] > 20) {
            foraDoLimite++;
        }else{
            dentroDoLimite++;
        }
    }
    console.log(`Dentro do limite temo: ${dentroDoLimite}, fora do limite temo : ${foraDoLimite}`);
}

contemNumero([0,1,2,10,15,20,25]);